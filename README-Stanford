
             Stanford Parser Compatibility Mode
             ----------------------------------
                      October 2009

The Stanford parser provides a defacto standard defintion of dependency
relations used in parsing.  Relex has a prototype compatibility feature,
which attempts to generate the same output as the Stanford parser.
This is an interesting thing to do, for two reasons:

   1) It provides a way of double-checking parse results,
   2) Preliminary tests show that RelEx is more than three
      times faster than the Stanford parser.

The compatibility mode is currently experimental and VERY incomplete.
It can be enabled with the --stanford flag, passed to
RelationExtractor.java


Test sentences
--------------
A list of test sentences, and status.
These are tested automatically by running "ant test", which runs the
test case "TestStanford.java".

Who invented sliced bread?
    Stanford output:
       nsubj(invented-2, Who-1)
       amod(bread-4, sliced-3)
       dobj(invented-2, bread-4)
    RelEx status: OK

Jim runs quickly.
    Stanford output:
       nsubj(runs-2, Jim-1)
       advmod(runs-2, quickly-3)
    RelEx status: OK

The bird, a robin, sang sweetly. 
    Stanford output:
       det(bird-2, The-1)
       nsubj(sang-7, bird-2)
       det(robin-5, a-4)
       appos(bird-2, robin-5)
       advmod(sang-7, sweetly-8)
    RelEx status: OK

There is a place we can go. 
    Stanford output:
       expl(is-2, There-1)
       det(place-4, a-3)
       nsubj(is-2, place-4)
       nsubj(go-7, we-5)
       aux(go-7, can-6)
       dep(is-2, go-7)
    RelEx status:
       Not testing this sentence, since stanford outputs a 
       "dep" which is not documented in thier manual.
       Other than that, the parsee works.

The linebacker gave the quarterback a push.
    Stanford output:
       det(linebacker-2, The-1)
       nsubj(gave-3, linebacker-2)
       det(quarterback-5, the-4)
       iobj(gave-3, quarterback-5)
       det(push-7, a-6)
       dobj(gave-3, push-7)
    RelEx status: OK

He stood at the goal line.
    Stanford output:
       nsubj(stood-2, He-1)
       det(line-6, the-4)
       nn(line-6, goal-5)
       prep_at(stood-2, line-6)
    RelEx status: OK

She looks very beautiful.
    Stanford output:
       nsubj(looks-2, She-1)
       advmod(beautiful-4, very-3)
       acomp(looks-2, beautiful-4)
    RelEx status: OK

The accident happened as the night was falling.
    Stanford output:
       det(accident-2, The-1)
       nsubj(happened-3, accident-2)
       mark(falling-8, as-4)
       det(night-6, the-5)
       nsubj(falling-8, night-6)
       aux(falling-8, was-7)
       advcl(happened-3, falling-8)
    RelEx status: OK

If you know who did it, you should tell the teacher.
    Stanford output:
       mark(know-3, If-1)
       nsubj(know-3, you-2)
       advcl(tell-10, know-3)
       nsubj(did-5, who-4)
       ccomp(know-3, did-5)
       dobj(did-5, it-6)
       nsubj(tell-10, you-8)
       aux(tell-10, should-9)
       det(teacher-12, the-11)
       dobj(tell-10, teacher-12)
    RelEx status: OK

The man has been killed by the police.
    Stanford output:
       det(man-2, The-1)
       nsubjpass(killed-5, man-2)
       aux(killed-5, has-3)
       auxpass(killed-5, been-4)
       det(police-8, the-7)
       agent(killed-5, police-8)
    Hmm ... but the above seems broken -- it leaves 
    out "by" in the parse.

Under construction:
       nsubjpass(killed-5, man-2)
       agent(killed-5, police-8)




The garage is next to the house.
    Stanford output:
       det(garage-2, The-1)
       nsubj(next-4, garage-2)
       cop(next-4, is-3)
       det(house-7, the-6)
       prep_to(next-4, house-7)



       
