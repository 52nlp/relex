
             Stanford Parser Compatibility Mode
             ----------------------------------
                      October 2009

The Stanford parser provides a defacto standard defintion of dependency
relations used in parsing.  Relex has a prototype compatibility feature,
which attempts to generate the same output as the Stanford parser.
This is an interesting thing to do, for two reasons:

   1) It provides a way of double-checking parse results,
   2) Preliminary tests show that RelEx is more than three
      times faster than the Stanford parser.

The compatibility mode is currently experimental and VERY incomplete.
It can be enabled with the --stanford flag, passed to
RelationExtractor.java


Test sentences
--------------
A list of test sentences, and status.
These are tested automatically by running "ant test", which runs the
test case "TestStanford.java".

Who invented sliced bread?
    Stanford output:
       nsubj(invented-2, Who-1)
       amod(bread-4, sliced-3)
       dobj(invented-2, bread-4)
    RelEx status: OK

Jim runs quickly.
    Stanford output:
       nsubj(runs-2, Jim-1)
       advmod(runs-2, quickly-3)
    RelEx status: OK

The bird, a robin, sang sweetly. 
    Stanford output:
       det(bird-2, The-1)
       nsubj(sang-7, bird-2)
       det(robin-5, a-4)
       appos(bird-2, robin-5)
       advmod(sang-7, sweetly-8)
    RelEx status: OK

There is a place we can go. 
    Stanford output:
       expl(is-2, There-1)
       det(place-4, a-3)
       nsubj(is-2, place-4)
       nsubj(go-7, we-5)
       aux(go-7, can-6)
       dep(is-2, go-7)
    RelEx status:
       Not testing this sentence, since stanford outputs a 
       "dep" which is not documented in thier manual.
       Other than that, the parse works.

The linebacker gave the quarterback a push.
    Stanford output:
       det(linebacker-2, The-1)
       nsubj(gave-3, linebacker-2)
       det(quarterback-5, the-4)
       iobj(gave-3, quarterback-5)
       det(push-7, a-6)
       dobj(gave-3, push-7)
    RelEx status: OK

He stood at the goal line.
    Stanford output:
       nsubj(stood-2, He-1)
       det(line-6, the-4)
       nn(line-6, goal-5)
       prep_at(stood-2, line-6)
    RelEx status: OK

She looks very beautiful.
    Stanford output:
       nsubj(looks-2, She-1)
       advmod(beautiful-4, very-3)
       acomp(looks-2, beautiful-4)
    RelEx status: OK

The accident happened as the night was falling.
    Stanford output:
       det(accident-2, The-1)
       nsubj(happened-3, accident-2)
       mark(falling-8, as-4)
       det(night-6, the-5)
       nsubj(falling-8, night-6)
       aux(falling-8, was-7)
       advcl(happened-3, falling-8)
    RelEx status: OK

If you know who did it, you should tell the teacher.
    Stanford output:
       mark(know-3, If-1)
       nsubj(know-3, you-2)
       advcl(tell-10, know-3)
       nsubj(did-5, who-4)
       ccomp(know-3, did-5)
       dobj(did-5, it-6)
       nsubj(tell-10, you-8)
       aux(tell-10, should-9)
       det(teacher-12, the-11)
       dobj(tell-10, teacher-12)
    RelEx status: OK

The man has been killed by the police.
    Stanford output:
       det(man-2, The-1)
       nsubjpass(killed-5, man-2)
       aux(killed-5, has-3)
       auxpass(killed-5, been-4)
       det(police-8, the-7)
       agent(killed-5, police-8)
    Relex status: OK.
    Hmm ... but the above seems broken -- it leaves out "by" from the 
    parse, using "agent" instead. Very strange! But that's what we'll
    do too.

Effects caused by the protein are important.
    Stanford output:
       nsubj(important-7, Effects-1)
       partmod(Effects-1, caused-2)
       det(protein-5, the-4)
       agent(caused-2, protein-5)
       cop(important-7, are-6)
    RelEx status: OK

Sam, my brother, has arrived.
    Stanford output:
       nsubj(arrived-7, Sam-1)
       poss(brother-4, my-3)
       appos(Sam-1, brother-4)
       aux(arrived-7, has-6)
    RelEx status: OK

What is that?
    Stanford output:
       attr(is-2, What-1)
       nsubj(is-2, that-3)
    RelEx status: OK

Reagan has died.
    Stanford output:
       nsubj(died-3, Reagan-1)
       aux(died-3, has-2)
    RelEx status: OK

He should leave.
    Stanford output:
       nsubj(leave-3, He-1)
       aux(leave-3, should-2)
    RelEx status: OK

Kennedy has been killed.
    Stanford output:
       nsubjpass(killed-4, Kennedy-1)
       aux(killed-4, has-2)
       auxpass(killed-4, been-3)
    RelEx status: OK

Kennedy was killed.
    Stanford output:
       nsubjpass(killed-3, Kennedy-1)
       auxpass(killed-3, was-2)
    RelEx status: OK

Kennedy got killed.
    Stanford output:
       nsubjpass(killed-3, Kennedy-1)
       auxpass(killed-3, got-2)
    RelEx status: OK

He says that you like to swim.
    Stanford output:
       nsubj(says-2, He-1)
       complm(like-5, that-3)
       nsubj(like-5, you-4)
       ccomp(says-2, like-5)
       nsubj(swim-7, to-6)
       ccomp(like-5, swim-7)
    RelEx status: Not testing. The "nsubj(swim, to)" seems insane to me
      RelEx currently generates aux(swim-7, to-6) which seems
      reasonable to me.

Bill is big.
    Stanford output:
       nsubj(big-3, Bill-1)
       cop(big-3, is-2)
    RelEx status: OK
       (RelEx treats this as a predicative adjective, which
       I think is more correct!)

Bill is an honest man.
    Stanford output:
       nsubj(man-5, Bill-1)
       cop(man-5, is-2)
       det(man-5, an-3)
       amod(man-5, honest-4)
    RelEx status: OK

What she said makes sense.
    Stanford output:
       dobj(said-3, What-1)
       nsubj(said-3, she-2)
       csubj(makes-4, said-3)
       dobj(makes-4, sense-5)
    RelEx status: OK

What she said is not true.
    Stanford output:
       dobj(said-3, What-1)
       nsubj(said-3, she-2)
       csubj(true-6, said-3)
       cop(true-6, is-4)
       neg(true-6, not-5)
    RelEx status: OK

That she lied was suspected by everyone.
    Stanford output:
       (Stanford is not outputting what the documentation says it
        should -- it was supposed to illustrate csubjpass.)

Which book do you prefer?
    Stanford output:
       det(book-2, Which-1)
       dobj(prefer-5, book-2)
       aux(prefer-5, do-3)
       nsubj(prefer-5, you-4)
    RelEx status: OK

There is a ghost in the room.
    Stanford output:
       expl(is-2, There-1)
       det(ghost-4, a-3)
       nsubj(is-2, ghost-4)
       det(room-7, the-6)
       prep_in(is-2, room-7)
    RelEx status: OK

I donâ€™t have anything to say.
    Stanford output:
       (Stanford is not outputting what the documentation says it
        should -- it was supposed to illustrate infmod.)

She gave me a raise.
    Stanford output:
       nsubj(gave-2, She-1)
       iobj(gave-2, me-3)
       det(raise-5, a-4)
       dobj(gave-2, raise-5)
    RelEx status: OK

Forces engaged in fighting after insurgents attacked.
    Stanford output:
       (Stanford is not outputting what the documentation says it
        should -- it was supposed to illustrate mark.)

The director is 65 years old.
    Stanford output:
       det(director-2, The-1)
       nsubj(old-6, director-2)
       cop(old-6, is-3)
       num(years-5, 65-4)
       measure(old-6, years-5)
    RelEx status: OK

Sam eats 3 sheep.
    Stanford output:
       nsubj(eats-2, Sam-1)
       num(sheep-4, 3-3)
       dobj(eats-2, sheep-4)
    RelEx status: OK

I lost $ 3.2 billion.
    Stanford output:
       nsubj(lost-2, I-1)
       dobj(lost-2, $-3)
       number($-3, 3.2-4)
       number($-3, billion-5)

    RelEx status: 
       I don't get it. There's a subtle distinction between num and
       number that stanford is making that I dont' understand.  RelEx
       currently generates:
          number(billion-5, 3-4)
          num($-3, billion-5)

Truffles picked during the spring are tasty.
    Stanford output:
       nsubj(tasty-7, Truffles-1)
       partmod(Truffles-1, picked-2)
       det(spring-5, the-4)
       prep_during(picked-2, spring-5)
       cop(tasty-7, are-6)
    RelEx status: OK




Under construction:




Under construction:

The garage is next to the house.
    Stanford output:
       det(garage-2, The-1)
       nsubj(next-4, garage-2)
       cop(next-4, is-3)
       det(house-7, the-6)
       prep_to(next-4, house-7)



       
